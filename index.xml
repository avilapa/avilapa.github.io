<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Víctor Ávila</title>
    <link>https://avilapa.github.io/</link>
    <description>Recent content on Víctor Ávila</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2018</copyright>
    <lastBuildDate>Sat, 01 Sep 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://avilapa.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>vxr: New beginnings</title>
      <link>https://avilapa.github.io/post/vxr-new-beginnings/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://avilapa.github.io/post/vxr-new-beginnings/</guid>
      <description>Index  New beginnings  Introduction Goals The first weeks!  Up next References  New beginnings Introduction vxr is a project that emerged from the desire to build a general purpose rendering tool that I could use to implement anything I was curious about or wanted to learn about. It was quickly restated and expanded as the tool on which the idea for my Bachelor&#39;s degree final year project would take form during this next year.</description>
    </item>
    
    <item>
      <title>Framerate independent physics in UE4</title>
      <link>https://avilapa.github.io/post/framerate-independent-physics-in-ue4/</link>
      <pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://avilapa.github.io/post/framerate-independent-physics-in-ue4/</guid>
      <description>If you are building a physics based game/application and you have plans of it running in a wide range of computers, you need to fix your physics timestep. Index  Understanding the problem Solving the problem  Configuring substepping Setting up substepping in code Handling substep physics   Understanding the problem Your game may be running fine at 120 fps in your computer, but lower-end computers out there waiting for your game to come out may not be able to even reach 60 fps.</description>
    </item>
    
    <item>
      <title>Fuel Renegades</title>
      <link>https://avilapa.github.io/fuel-renegades/</link>
      <pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://avilapa.github.io/fuel-renegades/</guid>
      <description>TL;DR: just go play it, its free! https://store.steampowered.com/app/878110/Fuel_Renegades/
  Fuel Renegades Fuel Renegades is an epic arcade racing game REAL FREE (no DLC, no loot boxes, just fun), where your brain will produce tons of adrenaline because of the awesome race endings. Play up to four players in the same computer enjoying the polished mechanics that gives you a smooth game feel. This game was developed during my final HND year by Modular Souls, a small group of programming and art students from ESAT Valencia and some composers from Berklee Valencia.</description>
    </item>
    
    <item>
      <title>Custom Engine: Physically Based Rendering</title>
      <link>https://avilapa.github.io/post/custom-engine-pbr/</link>
      <pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://avilapa.github.io/post/custom-engine-pbr/</guid>
      <description>Index  Background Physically Based Rendering  Introduction Physically Based Shading Image Based Lighting Merging  Atmospheric Scattering  Rayleigh Scattering Mie Scattering Phase Functions  References  Background Physically Based Rendering is not a technique, but a collection of graphics techniques aiming to achieve results as close as possible to the physical world. This means that these techniques are highly based on real world physics light behaviour formulas.</description>
    </item>
    
    <item>
      <title>Custom Engine: Postprocessing</title>
      <link>https://avilapa.github.io/post/custom-engine-postprocessing/</link>
      <pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://avilapa.github.io/post/custom-engine-postprocessing/</guid>
      <description>Index  Postprocessing Pipeline Postprocessing Effects  SSAO Bloom God Rays  References  Postprocessing Pipeline The goal of the pipeline was to make an API that is really easy to use for the users, and that requieres as little graphics knowledge as possible. The result, is as simple as the following: ref_ptr&amp;lt;Composer&amp;gt; cam_composer = Engine::ref().scene()-&amp;gt;camera()-&amp;gt;composer(); cam_composer-&amp;gt;set_shadow_mapping_enabled(true); cam_composer-&amp;gt;addPostprocessSSAO()-&amp;gt;addPostprocessBloom()-&amp;gt;addPostprocessFXAA();  This API makes some assumptions:
 The user will not create new postprocessing effects, they will just be able to compose the scene and tweak each render passes parameters.</description>
    </item>
    
    <item>
      <title>Custom OpenGL C&#43;&#43; Engine</title>
      <link>https://avilapa.github.io/render-engine/</link>
      <pubDate>Wed, 30 Aug 2006 03:45:00 +0200</pubDate>
      
      <guid>https://avilapa.github.io/render-engine/</guid>
      <description>The Engine This is an OpenGL and C++ rendering engine I made in my final HND year at ESAT Valencia for the graphics programming subject. Its main features are the following:  Multithreaded agnostical graphics API Component oriented engine Physically Based Rendering techniques:  Material pipeline (PBS, Metallic/Roughness workflow) Image Based Lighting (Radiance and Irradiance environment mapping) Atmospheric Scattering (Rayleigh and Mie Scattering)  GLTF model loading Postprocessing Pipeline:  Screen Space Ambient Occlusion (SSAO) Bloom Light Scattering (God Rays) Shadow Mapping Fast Approximate Anti-Aliasing (FXAA) Lens Distortion (with Grain, Vignette, Color Aberration) Tonemapping and multiple one-pass filters  Procedural generation of infinite voxel worlds UI integration (ImGui) Sound integration (OpenAL) Physics integration (Bullet Physics)  Related blog posts  Custom Engine: Physically Based Rendering The physically based approach used for my custom rendering engine.</description>
    </item>
    
    <item>
      <title>vxr (Open Source Engine)</title>
      <link>https://avilapa.github.io/vxr-engine/</link>
      <pubDate>Wed, 30 Aug 2006 03:45:00 +0200</pubDate>
      
      <guid>https://avilapa.github.io/vxr-engine/</guid>
      <description>The Engine vxr is an open source project that emerged from the desire to build a general purpose rendering tool that I could use to implement anything I was curious about or wanted to learn about. As it stands now, it is a multithreaded 3D game development engine written in C++ and oriented to support different rendering backends. The engine has two different APIs for development:  A lower level API based on render display list commands that can be used to build small but efficient applications.</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://avilapa.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://avilapa.github.io/about/</guid>
      <description>I am a final year games development student (programmer) in Sheffield Hallam University. I am a very enthusiastic and motivated person, looking forward to begin my career in the industry and to provide my team with proactivity and creativity. I have worked in one published title in PC while in college, and I am currently working on a second one for the PS4 (both in Unreal Engine 4). Also when I got the chance I participated in Game Jams using Unity 3D.</description>
    </item>
    
    <item>
      <title>Portfolio</title>
      <link>https://avilapa.github.io/portfolio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://avilapa.github.io/portfolio/</guid>
      <description>You can read a little bit about me first!
  Fuel Renegades (UE4 Steam Published Game) Link: https://store.steampowered.com/app/878110/Fuel_Renegades/
Arcade racing multiplayer (4 players split-screen, up to 8 players online) game with polished mechanics and smooth game feel, built in Unreal Engine 4 and published on Steam. My main contributions to the project are:
 Player Vehicle design and implementation: full implementation of vehicle movement mechanics with special emphasis on its feeling and speed.</description>
    </item>
    
  </channel>
</rss>